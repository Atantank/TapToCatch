//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/StepController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StepController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StepController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StepController"",
    ""maps"": [
        {
            ""name"": ""Android"",
            ""id"": ""26caea65-2523-4ba7-b2cd-a8852ddbd26b"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""91e49694-cedb-4b7d-9f52-fbbec8f88314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""ccc35ece-0a7b-4415-b50e-db634da0fced"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32552feb-8036-4c45-9153-9715fe9c96ac"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SensorScreen"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb381d42-e2ec-4313-80c9-91b5d7ac1ab8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SensorScreen"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92ab9a3f-ad39-4eb1-9761-2cb7cb07aed0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SensorScreen"",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""275f2bef-72b0-4e86-9a1b-827d7a61f3a6"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SensorScreen"",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""SensorScreen"",
            ""bindingGroup"": ""SensorScreen"",
            ""devices"": []
        }
    ]
}");
        // Android
        m_Android = asset.FindActionMap("Android", throwIfNotFound: true);
        m_Android_Tap = m_Android.FindAction("Tap", throwIfNotFound: true);
        m_Android_TapPosition = m_Android.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Android
    private readonly InputActionMap m_Android;
    private IAndroidActions m_AndroidActionsCallbackInterface;
    private readonly InputAction m_Android_Tap;
    private readonly InputAction m_Android_TapPosition;
    public struct AndroidActions
    {
        private @StepController m_Wrapper;
        public AndroidActions(@StepController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Android_Tap;
        public InputAction @TapPosition => m_Wrapper.m_Android_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_Android; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidActions set) { return set.Get(); }
        public void SetCallbacks(IAndroidActions instance)
        {
            if (m_Wrapper.m_AndroidActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTap;
                @TapPosition.started -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTapPosition;
                @TapPosition.performed -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTapPosition;
                @TapPosition.canceled -= m_Wrapper.m_AndroidActionsCallbackInterface.OnTapPosition;
            }
            m_Wrapper.m_AndroidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @TapPosition.started += instance.OnTapPosition;
                @TapPosition.performed += instance.OnTapPosition;
                @TapPosition.canceled += instance.OnTapPosition;
            }
        }
    }
    public AndroidActions @Android => new AndroidActions(this);
    private int m_SensorScreenSchemeIndex = -1;
    public InputControlScheme SensorScreenScheme
    {
        get
        {
            if (m_SensorScreenSchemeIndex == -1) m_SensorScreenSchemeIndex = asset.FindControlSchemeIndex("SensorScreen");
            return asset.controlSchemes[m_SensorScreenSchemeIndex];
        }
    }
    public interface IAndroidActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
